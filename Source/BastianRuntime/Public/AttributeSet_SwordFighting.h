// Generated by Attribute Generator (https://bit.ly/AttributeGenerator). MIT license.
// Part of the series 'Create a game with Unreal Lyra - Developer Bastian - https://youtube.com/@BastianDev'
#pragma once

#include "AbilitySystemComponent.h"
#include "AbilitySystem/Attributes/LyraAttributeSet.h"
#include "AbilitySystem/LyraAbilitySystemComponent.h"
#include "NativeGameplayTags.h"
#include "AttributeSet_SwordFighting.generated.h"

class UObject;
struct FFrame;

#pragma region GameplayTags
UE_DECLARE_GAMEPLAY_TAG_EXTERN(TAG_AttributeSet_SwordFighting_Swiftness);
UE_DECLARE_GAMEPLAY_TAG_EXTERN(TAG_AttributeSet_SwordFighting_SwordTechnique);

#pragma endregion

/**
 * AttributeSet_SwordFighting
 * Sword fight attributes
 */
UCLASS(BlueprintType)
class UAttributeSet_SwordFighting : public UGameAttributeSet
{
	GENERATED_BODY()

public:
	UAttributeSet_SwordFighting();

#pragma region GETTER-SETTER-INITS

#pragma region GET-SET-INIT Swiftness

	/** Gets current Swiftness's FGameplayAttribute */
	UFUNCTION(BlueprintPure, Category = "AttributeSet_SwordFighting|Swiftness")
		static FGameplayAttribute GetSwiftnessAttribute()
	{
		static FProperty* Prop = FindFieldChecked<FProperty>(UAttributeSet_SwordFighting::StaticClass(), GET_MEMBER_NAME_CHECKED(UAttributeSet_SwordFighting, Swiftness));
		UE_LOG(GameAttributeSet, VeryVerbose, TEXT("Ge|SwiftnessAttribute: Returned |Swiftness FProperty '%s'"), *GetNameSafe(Prop));
		return Prop;
	}

	/** Gets current Swiftness base value (without any currently ongoing modifications */
	UFUNCTION(BlueprintPure, Category = "AttributeSet_SwordFighting|Swiftness")
		FORCEINLINE float GetBaseSwiftness() const
	{
		UE_LOG(GameAttributeSet, VeryVerbose, TEXT("GetSwiftnessAttribute: Returned Swiftness base value: '%d'"), Swiftness.GetBaseValue());
		return Swiftness.GetBaseValue();
	}

	/** Gets current Swiftness value. Current value is base value plus/minus all modifiers */
	UFUNCTION(BlueprintPure, Category = "AttributeSet_SwordFighting|Swiftness")
		FORCEINLINE float GetCurrentSwiftness() const
	{
		UE_LOG(GameAttributeSet, VeryVerbose, TEXT("GetSwiftnessAttribute: Returned Swiftness current value: '%d'"), Swiftness.GetCurrentValue());
		return Swiftness.GetCurrentValue();
	}

	/** Gets relative Swiftness value between 0 and 1. Current value is base value plus/minus all modifiers */
	UFUNCTION(BlueprintPure, Category = "AttributeSet_SwordFighting|Swiftness")
		FORCEINLINE float GetRelativeSwiftness() const
	{
		UE_LOG(GameAttributeSet, VeryVerbose, TEXT("GetSwiftnessAttribute: Returned Swiftness relative value: '%d'")
			, Swiftness.GetCurrentValue() / Swiftness.GetBaseValue());
		return Swiftness.GetCurrentValue() / Swiftness.GetBaseValue();
	}

	/** Sets Swiftness base (and current) value. Base value is the permanent base, current value is after all modifiers. Should only be called on initialization */
	UFUNCTION(BlueprintCallable, BlueprintAuthorityOnly, Category = "AttributeSet_SwordFighting|Swiftness")
		FORCEINLINE void SetBaseSwiftness(float NewVal)
	{
		UAbilitySystemComponent* AbilityComp = GetOwningAbilitySystemComponent();
		if (ensure(AbilityComp))
		{
			AbilityComp->SetNumericAttributeBase(GetSwiftnessAttribute(), NewVal);
		}
		else
		{
			UE_LOG(GameAttributeSet, Error, TEXT("SetBaseSwiftness: Failed to find valid ASC"));
		}
	}

	/** Each attribute corresponds to a gameplay tag with the format AttributeSets.YourAttributeSetName.AttributeName */
	UFUNCTION(BlueprintPure, Category = "AttributeSet_SwordFighting|Swiftness")
		FORCEINLINE FGameplayTag GetGameplayTag_Swiftness() const;
#pragma endregion


#pragma region GET-SET-INIT SwordTechnique

	/** Gets current SwordTechnique's FGameplayAttribute */
	UFUNCTION(BlueprintPure, Category = "AttributeSet_SwordFighting|SwordTechnique")
		static FGameplayAttribute GetSwordTechniqueAttribute()
	{
		static FProperty* Prop = FindFieldChecked<FProperty>(UAttributeSet_SwordFighting::StaticClass(), GET_MEMBER_NAME_CHECKED(UAttributeSet_SwordFighting, SwordTechnique));
		UE_LOG(GameAttributeSet, VeryVerbose, TEXT("Ge|SwordTechniqueAttribute: Returned |SwordTechnique FProperty '%s'"), *GetNameSafe(Prop));
		return Prop;
	}

	/** Gets current SwordTechnique base value (without any currently ongoing modifications */
	UFUNCTION(BlueprintPure, Category = "AttributeSet_SwordFighting|SwordTechnique")
		FORCEINLINE float GetBaseSwordTechnique() const
	{
		UE_LOG(GameAttributeSet, VeryVerbose, TEXT("GetSwordTechniqueAttribute: Returned SwordTechnique base value: '%d'"), SwordTechnique.GetBaseValue());
		return SwordTechnique.GetBaseValue();
	}

	/** Gets current SwordTechnique value. Current value is base value plus/minus all modifiers */
	UFUNCTION(BlueprintPure, Category = "AttributeSet_SwordFighting|SwordTechnique")
		FORCEINLINE float GetCurrentSwordTechnique() const
	{
		UE_LOG(GameAttributeSet, VeryVerbose, TEXT("GetSwordTechniqueAttribute: Returned SwordTechnique current value: '%d'"), SwordTechnique.GetCurrentValue());
		return SwordTechnique.GetCurrentValue();
	}

	/** Gets relative SwordTechnique value between 0 and 1. Current value is base value plus/minus all modifiers */
	UFUNCTION(BlueprintPure, Category = "AttributeSet_SwordFighting|SwordTechnique")
		FORCEINLINE float GetRelativeSwordTechnique() const
	{
		UE_LOG(GameAttributeSet, VeryVerbose, TEXT("GetSwordTechniqueAttribute: Returned SwordTechnique relative value: '%d'")
			, SwordTechnique.GetCurrentValue() / SwordTechnique.GetBaseValue());
		return SwordTechnique.GetCurrentValue() / SwordTechnique.GetBaseValue();
	}

	/** Sets SwordTechnique base (and current) value. Base value is the permanent base, current value is after all modifiers. Should only be called on initialization */
	UFUNCTION(BlueprintCallable, BlueprintAuthorityOnly, Category = "AttributeSet_SwordFighting|SwordTechnique")
		FORCEINLINE void SetBaseSwordTechnique(float NewVal)
	{
		UAbilitySystemComponent* AbilityComp = GetOwningAbilitySystemComponent();
		if (ensure(AbilityComp))
		{
			AbilityComp->SetNumericAttributeBase(GetSwordTechniqueAttribute(), NewVal);
		}
		else
		{
			UE_LOG(GameAttributeSet, Error, TEXT("SetBaseSwordTechnique: Failed to find valid ASC"));
		}
	}

	/** Each attribute corresponds to a gameplay tag with the format AttributeSets.YourAttributeSetName.AttributeName */
	UFUNCTION(BlueprintPure, Category = "AttributeSet_SwordFighting|SwordTechnique")
		FORCEINLINE FGameplayTag GetGameplayTag_SwordTechnique() const;
#pragma endregion


#pragma endregion

protected:
#pragma region Replication
	UFUNCTION()
		void OnRep_Swiftness(const FGameplayAttributeData& OldValue);

	UFUNCTION()
		void OnRep_SwordTechnique(const FGameplayAttributeData& OldValue);


#pragma endregion

#pragma region Event pre and post Gameplay Effects
	// events pre or post applying a Gameplay Effect
	virtual void PostGameplayEffectExecute(const FGameplayEffectModCallbackData& Data) override;
	// events pre or post applying an Attribute change
	virtual void PreAttributeBaseChange(const FGameplayAttribute& Attribute, float& NewValue) const override;
	virtual void PreAttributeChange(const FGameplayAttribute& Attribute, float& NewValue) override;
	virtual void PostAttributeChange(const FGameplayAttribute& Attribute, float OldValue, float NewValue) override;
	virtual void OnAttributeAggregatorCreated(const FGameplayAttribute& Attribute, FAggregator* NewAggregator) const override;
#pragma endregion

	// helper function to make sure that the attribute stays between zero and max
	void ClampAttribute(const FGameplayAttribute& Attribute, float& NewValue) const;

private:

	// one property per attribute
	UPROPERTY(BlueprintReadOnly, ReplicatedUsing = OnRep_Swiftness, Category = "AttributeSet_SwordFighting", Meta = (AllowPrivateAccess = true))
		FGameplayAttributeData Swiftness;

	UPROPERTY(BlueprintReadOnly, ReplicatedUsing = OnRep_SwordTechnique, Category = "AttributeSet_SwordFighting", Meta = (AllowPrivateAccess = true))
		FGameplayAttributeData SwordTechnique;


};