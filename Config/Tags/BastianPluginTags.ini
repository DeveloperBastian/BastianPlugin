[/Script/GameplayTags.GameplayTagsList]
; Tags for Attributesets will be programmatically generated via the Attribute Set creator at https://bit.ly/AttributeGenerator

; Gameplay Abilities
GameplayTagList=(Tag="Ability.DebugButtons",DevComment="Toggle Debug Buttons visibility")
GameplayTagList=(Tag="Ability.Emote.BreakDance1990",DevComment="Demo to show Mixamo dance")
GameplayTagList=(Tag="Ability.Emote.Fingershot",DevComment="Fingershot ability")
GameplayTagList=(Tag="Ability.SkinChange.Duration.Message",DevComment="Duration of skin change ")
GameplayTagList=(Tag="Ability.Targeting",DevComment="Targeting ability from Plugin")
GameplayTagList=(Tag="Ability.Teleport.Duration.Message",DevComment="Is listened by cooldown widgets")
GameplayTagList=(Tag="Ability.Interaction.PressButton",DevComment="Interact with BP_BA_Button")
GameplayTagList=(Tag="Ability.Interaction.Message",DevComment="Broadcasts 1 on start, 0 on end")

; Logging
GameplayTagList=(Tag="Logging.Visibility.LogMsgWindow",DevComment="Broadcasts visibility to e.g. W_LogMessage")

; Ability Queue (not yet implemented)
GameplayTagList=(Tag="Ability.Queue.CANCELGA",DevComment="Indicator to cancel current GA")
GameplayTagList=(Tag="Ability.Queue.CANCELREQUEST",DevComment="Do not process current request")
GameplayTagList=(Tag="Ability.Queue.ENQUEUE",DevComment="Enqueue a GA")
GameplayTagList=(Tag="Ability.Queue.FINISH",DevComment="GA finished")
GameplayTagList=(Tag="Ability.Queue.PROCEED",DevComment="GA proceed after pause")

; Gameplay events 
GameplayTagList=(Tag="Gameplay.SkinChangeImmunity",DevComment="Cooldown for skin change for Gameplay Effects")
GameplayTagList=(Tag="Gameplay.TeleportImmunity",DevComment="Set Teleport cooldown for Gameplay Effects")
GameplayTagList=(Tag="GameplayCue.Character.SkinChange",DevComment="Triggers gameplay cue for skin change")
GameplayTagList=(Tag="GameplayEvent.Teleport",DevComment="Triggered by GA_Teleport")

; Input Tags
GameplayTagList=(Tag="InputTag.Ability.DebugButtons",DevComment="Toggle Debug Buttons visibility")
GameplayTagList=(Tag="InputTag.Ability.Fingershot",DevComment="Triggers the FingerShot emote")
GameplayTagList=(Tag="InputTag.Ability.Interact",DevComment="Trigger Interact from ShooterExplorer")
GameplayTagList=(Tag="InputTag.Ability.ToggleTarget",DevComment="Triggers the Targeting Plugin system")
GameplayTagList=(Tag="InputTag.Emote.BreakDance1990",DevComment="Demo to show Mixamo dance")
GameplayTagList=(Tag="InputTag.Look.SwitchCamera",DevComment="Not yet implemented - idea to switch camera")
GameplayTagList=(Tag="InputTag.Ability.PressButton",DevComment="Trigger Interaction with BP_BA_Button")

; Items
GameplayTagList=(Tag="Items.Elements",DevComment="Elements from the periodic system table. Broadcast channel: Payload is Struct_Elements")

; Inventory Messages - Item Management
GameplayTagList=(Tag="Items.AddItemToInventory.Request",DevComment="Broadcast channel: Payload is Struct_InvOwnerAndItem")
GameplayTagList=(Tag="Items.AddItemToInventory.Receive",DevComment="Broadcast channel: Payload is Struct_ItemInvOwner")
GameplayTagList=(Tag="Items.MoveItemsBetweenInventory.Request",DevComment="Broadcast channel: Payload is Struct_OwnerInvSourceInvTargetItemGuids")
GameplayTagList=(Tag="Items.MoveItemsBetweenInventory.Receive",DevComment="Broadcast channel: Payload is Struct_OwnerInvSourceInvTargetItemGuids")
GameplayTagList=(Tag="Items.DeleteItemFromInventory.Request",DevComment="Broadcast channel: Payload is Struct_InvOwnerAndItem")
GameplayTagList=(Tag="Items.DeleteItemFromInventory.Receive",DevComment="Broadcast channel: Payload is Struct_InvOwnerAndItem")
GameplayTagList=(Tag="Items.ItemExchangeInfo.CompToManager",DevComment="Inventory Component -> Inventory Manager - All item actions (defined in E_ItemActions): Payload is Struct_ItemExchangeInfo")
GameplayTagList=(Tag="Items.ItemExchangeInfo.ManagerToComp",DevComment="Inventory Manager -> Inventory Component - All item actions (defined in E_ItemActions): Payload is Struct_ItemExchangeInfo")
GameplayTagList=(Tag="Items.InventoryInfo.CompToManager",DevComment="Inventory Component -> Inventory Manager - All inventory actions (defined in E_InventoryActions): Payload is Struct_InventoryExchangeInfo")
GameplayTagList=(Tag="Items.InventoryInfo.ManagerToComp",DevComment="Inventory Manager -> Inventory Component - All inventory actions (defined in E_InventoryActions): Payload is Struct_InventoryExchangeInfo")

; Inventory Messages - Retrieve
GameplayTagList=(Tag="Items.GetAllItemsWithFragments",DevComment="Returns a map of Item Definitions according to fragment filter")
GameplayTagList=(Tag="Items.GetAllItemsWithoutFragments",DevComment="Returns a map of Item Definitions according to fragment filter")
GameplayTagList=(Tag="Items.GetAllItems",DevComment="Returns a map of Item Definitions")

; Inventory Messages - Inventory Management
GameplayTagList=(Tag="Items.RequestNewInventoryFromInventoryManager.Request",DevComment="Broadcast channel: Payload is Struct_NewDefaultInventoryRequest")
GameplayTagList=(Tag="Items.RequestNewInventoryFromInventoryManager.Receive",DevComment="Broadcast channel: Payload Struct_Inventory")
GameplayTagList=(Tag="Items.InventoryMetaData.Request",DevComment="Broadcast channel: Payload is Struct_InvOwnerCrossTableEntry")
GameplayTagList=(Tag="Items.InventoryMetaData.Receive",DevComment="Broadcast channel: Payload is Struct_InvAndOwner")
GameplayTagList=(Tag="Items.ModifyAccessToExistingInventory.Request",DevComment="Broadcast channel:: Payload is Struct_InvOwnerCrossTableEntry")
GameplayTagList=(Tag="Items.ModifyAccessToExistingInventory.Receive",DevComment="Broadcast channel:: Payload is Struct_InvOwnerCrossTableEntry")

; Weapons
GameplayTagList=(Tag="Weapons.ArgonianMace",DevComment="One hand weapon")
GameplayTagList=(Tag="Weapons.HandMagic",DevComment="For Mixamo magic pack")
GameplayTagList=(Tag="Weapons.LongBow",DevComment="")
GameplayTagList=(Tag="Weapons.LongSword",DevComment="Two hand weapon")
GameplayTagList=(Tag="Weapons.MagicStaff",DevComment="")
GameplayTagList=(Tag="Weapons.SwordAndShield",DevComment="For Mixamo Sword and Shield Pack")

; Weapon Anim Indicator
GameplayTagList=(Tag="Weapons.IsTwoHand",DevComment="Indicator if left hand IK is to be used in weapon ABP")
