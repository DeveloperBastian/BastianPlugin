// Generated by Attribute Generator (https://bit.ly/AttributeGenerator). MIT license.
// Part of the series 'Create a game with Unreal Lyra - Developer Bastian - https://youtube.com/@BastianDev'
#pragma once

#include "AbilitySystemComponent.h"
#include "AbilitySystem/Attributes/LyraAttributeSet.h"
#include "AbilitySystem/LyraAbilitySystemComponent.h"
#include "NativeGameplayTags.h"
#include "AttributeSet_BA_CharBaseStats.generated.h"

class UObject;
struct FFrame;
#pragma region Baseclass UGameAttributeSet: CAN ONLY EXISTS ONCE IN YOUR PROJECT. IF YOU GENERATE MULTIPLE ATTRIBUTE SETS, DELETE THIS SECTION STARTING WITH THE SECOND SET (OR UNCHECK THE BOX FOR THE NEXT SET)
/**
 * Base Class for classes generated by the AttributeSet Generator (https://bit.ly/AttributeGenerator)
 */
UCLASS(Blueprintable)
class UGameAttributeSet : public ULyraAttributeSet
{
	GENERATED_BODY()
public:
	UGameAttributeSet() {}

#pragma region ADD-REMOVE AttributeSet
	/** Attaches this AttributeSet to a given ASC */
	UFUNCTION(BlueprintCallable, BlueprintAuthorityOnly, Category = "UGameAttributeSet")
		FORCEINLINE void AttachToASC(ULyraAbilitySystemComponent* AbilitySystemComponent);

	/** Removes this AttributeSet from a given ASC. This can be dangerous if a value has not been already replicated and cannot find its corresponding AttributSet - this will crash the game!!! */
	UFUNCTION(BlueprintCallable, BlueprintAuthorityOnly, Category = "UGameAttributeSet")
		FORCEINLINE void RemoveFromASC(ULyraAbilitySystemComponent* AbilitySystemComponent);

	/** Looks for an instance of the given AttribueSet class in the given AbilitySetComponent and returns all Attributes found in that instance with their current values */
	UFUNCTION(BlueprintCallable, Category = "UGameAttributeSet")
		FORCEINLINE TArray<FGameplayAttribute> GetAttributesForAttributeSetClass(ULyraAbilitySystemComponent* AbilitySystemComponent, TSubclassOf<UAttributeSet> AttributSetClass);
#pragma endregion  
};
#pragma region Logging
/** Macro to create a log category for everything generated here */
DECLARE_LOG_CATEGORY_EXTERN(GameAttributeSet, Log, All);
#pragma endregion
#pragma endregion DELETE UNTIL HERE IF YOU USE MULTIPLE ATTRIBUTE SETS AND FORGOT TO UNCHECK THE BOX
#pragma region GameplayTags
UE_DECLARE_GAMEPLAY_TAG_EXTERN(TAG_AttributeSet_BA_CharBaseStats_Strength);
UE_DECLARE_GAMEPLAY_TAG_EXTERN(TAG_AttributeSet_BA_CharBaseStats_Endurance);
UE_DECLARE_GAMEPLAY_TAG_EXTERN(TAG_AttributeSet_BA_CharBaseStats_Intelligence);
UE_DECLARE_GAMEPLAY_TAG_EXTERN(TAG_AttributeSet_BA_CharBaseStats_Dexterity);

#pragma endregion

/**
 * AttributeSet_BA_CharBaseStats
 * Default hero attribute set for BA plugin
 */
UCLASS(BlueprintType)
class UAttributeSet_BA_CharBaseStats : public UGameAttributeSet
{
	GENERATED_BODY()

public:
	UAttributeSet_BA_CharBaseStats();

#pragma region GETTER-SETTER-INITS

#pragma region GET-SET-INIT Strength

	/** Gets current Strength's FGameplayAttribute */
	UFUNCTION(BlueprintPure, Category = "AttributeSet_BA_CharBaseStats|Strength")
		static FGameplayAttribute GetStrengthAttribute()
	{
		static FProperty* Prop = FindFieldChecked<FProperty>(UAttributeSet_BA_CharBaseStats::StaticClass(), GET_MEMBER_NAME_CHECKED(UAttributeSet_BA_CharBaseStats, Strength));
		UE_LOG(GameAttributeSet, VeryVerbose, TEXT("Ge|StrengthAttribute: Returned |Strength FProperty '%s'"), *GetNameSafe(Prop));
		return Prop;
	}

	/** Gets current Strength base value (without any currently ongoing modifications */
	UFUNCTION(BlueprintPure, Category = "AttributeSet_BA_CharBaseStats|Strength")
		FORCEINLINE float GetBaseStrength() const
	{
		UE_LOG(GameAttributeSet, VeryVerbose, TEXT("GetStrengthAttribute: Returned Strength base value: '%d'"), Strength.GetBaseValue());
		return Strength.GetBaseValue();
	}

	/** Gets current Strength value. Current value is base value plus/minus all modifiers */
	UFUNCTION(BlueprintPure, Category = "AttributeSet_BA_CharBaseStats|Strength")
		FORCEINLINE float GetCurrentStrength() const
	{
		UE_LOG(GameAttributeSet, VeryVerbose, TEXT("GetStrengthAttribute: Returned Strength current value: '%d'"), Strength.GetCurrentValue());
		return Strength.GetCurrentValue();
	}

	/** Gets relative Strength value between 0 and 1. Current value is base value plus/minus all modifiers */
	UFUNCTION(BlueprintPure, Category = "AttributeSet_BA_CharBaseStats|Strength")
		FORCEINLINE float GetRelativeStrength() const
	{
		UE_LOG(GameAttributeSet, VeryVerbose, TEXT("GetStrengthAttribute: Returned Strength relative value: '%d'")
			, Strength.GetCurrentValue() / Strength.GetBaseValue());
		return Strength.GetCurrentValue() / Strength.GetBaseValue();
	}

	/** Sets Strength base (and current) value. Base value is the permanent base, current value is after all modifiers. Should only be called on initialization */
	UFUNCTION(BlueprintCallable, BlueprintAuthorityOnly, Category = "AttributeSet_BA_CharBaseStats|Strength")
		FORCEINLINE void SetBaseStrength(float NewVal)
	{
		UAbilitySystemComponent* AbilityComp = GetOwningAbilitySystemComponent();
		if (ensure(AbilityComp))
		{
			AbilityComp->SetNumericAttributeBase(GetStrengthAttribute(), NewVal);
		}
		else
		{
			UE_LOG(GameAttributeSet, Error, TEXT("SetBaseStrength: Failed to find valid ASC"));
		}
	}

	/** Each attribute corresponds to a gameplay tag with the format AttributeSets.YourAttributeSetName.AttributeName */
	UFUNCTION(BlueprintPure, Category = "AttributeSet_BA_CharBaseStats|Strength")
		FORCEINLINE FGameplayTag GetGameplayTag_Strength() const;
#pragma endregion


#pragma region GET-SET-INIT Endurance

	/** Gets current Endurance's FGameplayAttribute */
	UFUNCTION(BlueprintPure, Category = "AttributeSet_BA_CharBaseStats|Endurance")
		static FGameplayAttribute GetEnduranceAttribute()
	{
		static FProperty* Prop = FindFieldChecked<FProperty>(UAttributeSet_BA_CharBaseStats::StaticClass(), GET_MEMBER_NAME_CHECKED(UAttributeSet_BA_CharBaseStats, Endurance));
		UE_LOG(GameAttributeSet, VeryVerbose, TEXT("Ge|EnduranceAttribute: Returned |Endurance FProperty '%s'"), *GetNameSafe(Prop));
		return Prop;
	}

	/** Gets current Endurance base value (without any currently ongoing modifications */
	UFUNCTION(BlueprintPure, Category = "AttributeSet_BA_CharBaseStats|Endurance")
		FORCEINLINE float GetBaseEndurance() const
	{
		UE_LOG(GameAttributeSet, VeryVerbose, TEXT("GetEnduranceAttribute: Returned Endurance base value: '%d'"), Endurance.GetBaseValue());
		return Endurance.GetBaseValue();
	}

	/** Gets current Endurance value. Current value is base value plus/minus all modifiers */
	UFUNCTION(BlueprintPure, Category = "AttributeSet_BA_CharBaseStats|Endurance")
		FORCEINLINE float GetCurrentEndurance() const
	{
		UE_LOG(GameAttributeSet, VeryVerbose, TEXT("GetEnduranceAttribute: Returned Endurance current value: '%d'"), Endurance.GetCurrentValue());
		return Endurance.GetCurrentValue();
	}

	/** Gets relative Endurance value between 0 and 1. Current value is base value plus/minus all modifiers */
	UFUNCTION(BlueprintPure, Category = "AttributeSet_BA_CharBaseStats|Endurance")
		FORCEINLINE float GetRelativeEndurance() const
	{
		UE_LOG(GameAttributeSet, VeryVerbose, TEXT("GetEnduranceAttribute: Returned Endurance relative value: '%d'")
			, Endurance.GetCurrentValue() / Endurance.GetBaseValue());
		return Endurance.GetCurrentValue() / Endurance.GetBaseValue();
	}

	/** Sets Endurance base (and current) value. Base value is the permanent base, current value is after all modifiers. Should only be called on initialization */
	UFUNCTION(BlueprintCallable, BlueprintAuthorityOnly, Category = "AttributeSet_BA_CharBaseStats|Endurance")
		FORCEINLINE void SetBaseEndurance(float NewVal)
	{
		UAbilitySystemComponent* AbilityComp = GetOwningAbilitySystemComponent();
		if (ensure(AbilityComp))
		{
			AbilityComp->SetNumericAttributeBase(GetEnduranceAttribute(), NewVal);
		}
		else
		{
			UE_LOG(GameAttributeSet, Error, TEXT("SetBaseEndurance: Failed to find valid ASC"));
		}
	}

	/** Each attribute corresponds to a gameplay tag with the format AttributeSets.YourAttributeSetName.AttributeName */
	UFUNCTION(BlueprintPure, Category = "AttributeSet_BA_CharBaseStats|Endurance")
		FORCEINLINE FGameplayTag GetGameplayTag_Endurance() const;
#pragma endregion


#pragma region GET-SET-INIT Intelligence

	/** Gets current Intelligence's FGameplayAttribute */
	UFUNCTION(BlueprintPure, Category = "AttributeSet_BA_CharBaseStats|Intelligence")
		static FGameplayAttribute GetIntelligenceAttribute()
	{
		static FProperty* Prop = FindFieldChecked<FProperty>(UAttributeSet_BA_CharBaseStats::StaticClass(), GET_MEMBER_NAME_CHECKED(UAttributeSet_BA_CharBaseStats, Intelligence));
		UE_LOG(GameAttributeSet, VeryVerbose, TEXT("Ge|IntelligenceAttribute: Returned |Intelligence FProperty '%s'"), *GetNameSafe(Prop));
		return Prop;
	}

	/** Gets current Intelligence base value (without any currently ongoing modifications */
	UFUNCTION(BlueprintPure, Category = "AttributeSet_BA_CharBaseStats|Intelligence")
		FORCEINLINE float GetBaseIntelligence() const
	{
		UE_LOG(GameAttributeSet, VeryVerbose, TEXT("GetIntelligenceAttribute: Returned Intelligence base value: '%d'"), Intelligence.GetBaseValue());
		return Intelligence.GetBaseValue();
	}

	/** Gets current Intelligence value. Current value is base value plus/minus all modifiers */
	UFUNCTION(BlueprintPure, Category = "AttributeSet_BA_CharBaseStats|Intelligence")
		FORCEINLINE float GetCurrentIntelligence() const
	{
		UE_LOG(GameAttributeSet, VeryVerbose, TEXT("GetIntelligenceAttribute: Returned Intelligence current value: '%d'"), Intelligence.GetCurrentValue());
		return Intelligence.GetCurrentValue();
	}

	/** Gets relative Intelligence value between 0 and 1. Current value is base value plus/minus all modifiers */
	UFUNCTION(BlueprintPure, Category = "AttributeSet_BA_CharBaseStats|Intelligence")
		FORCEINLINE float GetRelativeIntelligence() const
	{
		UE_LOG(GameAttributeSet, VeryVerbose, TEXT("GetIntelligenceAttribute: Returned Intelligence relative value: '%d'")
			, Intelligence.GetCurrentValue() / Intelligence.GetBaseValue());
		return Intelligence.GetCurrentValue() / Intelligence.GetBaseValue();
	}

	/** Sets Intelligence base (and current) value. Base value is the permanent base, current value is after all modifiers. Should only be called on initialization */
	UFUNCTION(BlueprintCallable, BlueprintAuthorityOnly, Category = "AttributeSet_BA_CharBaseStats|Intelligence")
		FORCEINLINE void SetBaseIntelligence(float NewVal)
	{
		UAbilitySystemComponent* AbilityComp = GetOwningAbilitySystemComponent();
		if (ensure(AbilityComp))
		{
			AbilityComp->SetNumericAttributeBase(GetIntelligenceAttribute(), NewVal);
		}
		else
		{
			UE_LOG(GameAttributeSet, Error, TEXT("SetBaseIntelligence: Failed to find valid ASC"));
		}
	}

	/** Each attribute corresponds to a gameplay tag with the format AttributeSets.YourAttributeSetName.AttributeName */
	UFUNCTION(BlueprintPure, Category = "AttributeSet_BA_CharBaseStats|Intelligence")
		FORCEINLINE FGameplayTag GetGameplayTag_Intelligence() const;
#pragma endregion


#pragma region GET-SET-INIT Dexterity

	/** Gets current Dexterity's FGameplayAttribute */
	UFUNCTION(BlueprintPure, Category = "AttributeSet_BA_CharBaseStats|Dexterity")
		static FGameplayAttribute GetDexterityAttribute()
	{
		static FProperty* Prop = FindFieldChecked<FProperty>(UAttributeSet_BA_CharBaseStats::StaticClass(), GET_MEMBER_NAME_CHECKED(UAttributeSet_BA_CharBaseStats, Dexterity));
		UE_LOG(GameAttributeSet, VeryVerbose, TEXT("Ge|DexterityAttribute: Returned |Dexterity FProperty '%s'"), *GetNameSafe(Prop));
		return Prop;
	}

	/** Gets current Dexterity base value (without any currently ongoing modifications */
	UFUNCTION(BlueprintPure, Category = "AttributeSet_BA_CharBaseStats|Dexterity")
		FORCEINLINE float GetBaseDexterity() const
	{
		UE_LOG(GameAttributeSet, VeryVerbose, TEXT("GetDexterityAttribute: Returned Dexterity base value: '%d'"), Dexterity.GetBaseValue());
		return Dexterity.GetBaseValue();
	}

	/** Gets current Dexterity value. Current value is base value plus/minus all modifiers */
	UFUNCTION(BlueprintPure, Category = "AttributeSet_BA_CharBaseStats|Dexterity")
		FORCEINLINE float GetCurrentDexterity() const
	{
		UE_LOG(GameAttributeSet, VeryVerbose, TEXT("GetDexterityAttribute: Returned Dexterity current value: '%d'"), Dexterity.GetCurrentValue());
		return Dexterity.GetCurrentValue();
	}

	/** Gets relative Dexterity value between 0 and 1. Current value is base value plus/minus all modifiers */
	UFUNCTION(BlueprintPure, Category = "AttributeSet_BA_CharBaseStats|Dexterity")
		FORCEINLINE float GetRelativeDexterity() const
	{
		UE_LOG(GameAttributeSet, VeryVerbose, TEXT("GetDexterityAttribute: Returned Dexterity relative value: '%d'")
			, Dexterity.GetCurrentValue() / Dexterity.GetBaseValue());
		return Dexterity.GetCurrentValue() / Dexterity.GetBaseValue();
	}

	/** Sets Dexterity base (and current) value. Base value is the permanent base, current value is after all modifiers. Should only be called on initialization */
	UFUNCTION(BlueprintCallable, BlueprintAuthorityOnly, Category = "AttributeSet_BA_CharBaseStats|Dexterity")
		FORCEINLINE void SetBaseDexterity(float NewVal)
	{
		UAbilitySystemComponent* AbilityComp = GetOwningAbilitySystemComponent();
		if (ensure(AbilityComp))
		{
			AbilityComp->SetNumericAttributeBase(GetDexterityAttribute(), NewVal);
		}
		else
		{
			UE_LOG(GameAttributeSet, Error, TEXT("SetBaseDexterity: Failed to find valid ASC"));
		}
	}

	/** Each attribute corresponds to a gameplay tag with the format AttributeSets.YourAttributeSetName.AttributeName */
	UFUNCTION(BlueprintPure, Category = "AttributeSet_BA_CharBaseStats|Dexterity")
		FORCEINLINE FGameplayTag GetGameplayTag_Dexterity() const;
#pragma endregion


#pragma endregion

protected:
#pragma region Replication
	UFUNCTION()
		void OnRep_Strength(const FGameplayAttributeData& OldValue);

	UFUNCTION()
		void OnRep_Endurance(const FGameplayAttributeData& OldValue);

	UFUNCTION()
		void OnRep_Intelligence(const FGameplayAttributeData& OldValue);

	UFUNCTION()
		void OnRep_Dexterity(const FGameplayAttributeData& OldValue);


#pragma endregion

#pragma region Event pre and post Gameplay Effects
	// events pre or post applying a Gameplay Effect 
	virtual void PostGameplayEffectExecute(const FGameplayEffectModCallbackData& Data) override;
	// events pre or post applying an Attribute change
	virtual void PreAttributeBaseChange(const FGameplayAttribute& Attribute, float& NewValue) const override;
	virtual void PreAttributeChange(const FGameplayAttribute& Attribute, float& NewValue) override;
	virtual void PostAttributeChange(const FGameplayAttribute& Attribute, float OldValue, float NewValue) override;
	virtual void OnAttributeAggregatorCreated(const FGameplayAttribute& Attribute, FAggregator* NewAggregator) const override;
#pragma endregion

	// helper function to make sure that the attribute stays between zero and max
	void ClampAttribute(const FGameplayAttribute& Attribute, float& NewValue) const;

private:

	// one property per attribute
	UPROPERTY(BlueprintReadOnly, ReplicatedUsing = OnRep_Strength, Category = "AttributeSet_BA_CharBaseStats", Meta = (AllowPrivateAccess = true))
		FGameplayAttributeData Strength;

	UPROPERTY(BlueprintReadOnly, ReplicatedUsing = OnRep_Endurance, Category = "AttributeSet_BA_CharBaseStats", Meta = (AllowPrivateAccess = true))
		FGameplayAttributeData Endurance;

	UPROPERTY(BlueprintReadOnly, ReplicatedUsing = OnRep_Intelligence, Category = "AttributeSet_BA_CharBaseStats", Meta = (AllowPrivateAccess = true))
		FGameplayAttributeData Intelligence;

	UPROPERTY(BlueprintReadOnly, ReplicatedUsing = OnRep_Dexterity, Category = "AttributeSet_BA_CharBaseStats", Meta = (AllowPrivateAccess = true))
		FGameplayAttributeData Dexterity;


};